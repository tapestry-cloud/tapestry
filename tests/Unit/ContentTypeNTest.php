<?php

namespace Tapestry\Tests\Unit;

use Symfony\Component\Finder\SplFileInfo;
use Tapestry\Entities\DependencyGraph\SimpleNode;
use Tapestry\Entities\Project;
use Tapestry\Modules\ContentTypes\ContentType;
use Tapestry\Modules\ContentTypes\ContentTypeCollection;
use Tapestry\Modules\Source\MemorySource;
use Tapestry\Modules\Source\SourceInterface;
use Tapestry\Modules\Source\SplFileSource;
use Tapestry\Tests\TestCase;

class ContentTypeNTest extends TestCase
{
    /**
     * Added for issue 322
     * @see https://github.com/tapestry-cloud/tapestry/issues/322
     */
    public function testGetName()
    {
        $contentType = new ContentType('Test', ['enabled' => true]);
        $this->assertEquals('Test', $contentType->getName());
    }

    /**
     * Added for issue 322
     * @see https://github.com/tapestry-cloud/tapestry/issues/322
     */
    public function testGetPath()
    {
        $contentType = new ContentType('Test', ['path' => 123]);
        $this->assertEquals('_Test', $contentType->getPath());

        $contentType = new ContentType('Test', ['path' => '123']);
        $this->assertEquals('123', $contentType->getPath());

        $contentType = new ContentType('Test', ['path' => '']);
        $this->assertEquals('', $contentType->getPath());
    }

    /**
     * Added for issue 322
     * @see https://github.com/tapestry-cloud/tapestry/issues/322
     */
    public function testGetTemplate()
    {
        $contentType = new ContentType('Test', []);
        $this->assertEquals('_templates' . DIRECTORY_SEPARATOR . 'Test', $contentType->getTemplate());

        $contentType = new ContentType('Test', ['template' => 'hello-world']);
        $this->assertEquals('hello-world', $contentType->getTemplate());
    }

    /**
     * Added for issue 322
     * @see https://github.com/tapestry-cloud/tapestry/issues/322
     */
    public function testGetPermalink()
    {
        $contentType = new ContentType('Test', []);
        $this->assertEquals('Test/{slug}.{ext}', $contentType->getPermalink());

        $contentType = new ContentType('Test', ['permalink' => 123]);
        $this->assertEquals('Test/{slug}.{ext}', $contentType->getPermalink());

        $contentType = new ContentType('Test', ['permalink' => '{slug}.{ext}']);
        $this->assertEquals('{slug}.{ext}', $contentType->getPermalink());
    }

    /**
     * Added for issue 322
     * @see https://github.com/tapestry-cloud/tapestry/issues/322
     */
    public function testGetTaxonomyReturnsNull()
    {
        $contentType = new ContentType('Test', []);
        $this->assertCount(0, $contentType->getTaxonomies());

        $this->assertNull($contentType->getTaxonomy('test'));
    }

    /**
     * Added for issue 322
     * @see https://github.com/tapestry-cloud/tapestry/issues/322
     * @throws \Exception
     */
    public function testGetSourceListThrowsExceptionOnInvalidInput()
    {
        $contentType = new ContentType('Test', []);
        $this->expectExceptionMessage('The order attribute of getSourceList must be either asc or desc');
        $contentType->getSourceList('test');
    }

    /**
     * Added for issue 322
     * @see https://github.com/tapestry-cloud/tapestry/issues/322
     * @throws \Exception
     */
    public function testContentTypeReferencesSourceInterface()
    {
        $contentType = new ContentType('Test', ['enabled' => true]);
        $time = time();
        $files = [];
        foreach (range('a', 'd') as $x) {
            $f = new MemorySource('hello-world-' . $x, '', 'index-' . $x . '.phtml', 'phtml', '_blog', '_blog/index-' . $x . '.phtml', ['date' => $time]);
            $contentType->addSource($f);
            $time += 1000;
            array_push($files, $f);
        }
        unset($x, $f, $time);

        $this->assertTrue(is_array($contentType->getSourceList()));
        foreach ($contentType->getSourceList() as $source) {
            $this->assertInstanceOf(SourceInterface::class, $source);
        }

        foreach ($files as $file) {
            $this->assertTrue($contentType->hasSource($file));
        }

        $asc = $contentType->getSourceList('asc');
        $desc = $contentType->getSourceList('desc');
        $count = count($files);

        for ($i = 0; $i < $count; $i++) {
            $top = array_shift($asc);
            $bottom = array_pop($desc);
            $this->assertSame($top, $bottom);
        }
    }

    /**
     * Added for issue 88
     * @see https://github.com/carbontwelve/tapestry/issues/88
     * @throws \Exception
     */
    public function testAddSourceMutatesFileDataWithContentTypeName()
    {
        $contentType = new ContentType('Test', ['enabled' => true]);
        $file = new SplFileSource(new SplFileInfo(__DIR__ . '/../Mocks/TestFile.md', '', ''), ['date' => new \DateTime()]);
        $this->assertFalse($file->hasData('contentType'));
        $contentType->addSource($file);
        $this->assertTrue($file->hasData('contentType'));
    }

    /**
     * Added for issue 87
     * @see https://github.com/carbontwelve/tapestry/issues/87
     * @throws \Tapestry\Exceptions\GraphException
     * @throws \Exception
     */
    public function testContentTypeFactoryArrayAccessByKey()
    {
        $project = new Project('', '', '');
        $project->getGraph()->setRoot(new SimpleNode('configuration', 'hello world'));
        $contentType = new ContentType('Test', ['enabled' => true]);
        $contentTypeFactory = new ContentTypeCollection([
            $contentType
        ], $project);
        $this->assertTrue($contentTypeFactory->has('_Test'));
        $this->assertEquals($contentType, $contentTypeFactory->arrayAccessByKey('Test'));
        $this->assertEquals(null, $contentTypeFactory->arrayAccessByKey('NonExistant'));
    }

    /**
     * Added for issue 86
     * @see https://github.com/carbontwelve/tapestry/issues/86
     */
    public function testContentTypeEnabled()
    {
        $contentType = new ContentType('Test', []);
        $this->assertFalse($contentType->isEnabled());

        $contentType->setEnabled();
        $this->assertTrue($contentType->isEnabled());

        $contentType = new ContentType('Test', ['enabled' => true]);
        $this->assertTrue($contentType->isEnabled());

        $contentType->setEnabled(false);
        $this->assertFalse($contentType->isEnabled());
    }
}
